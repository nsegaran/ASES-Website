{"ast":null,"code":"var _jsxFileName = \"/Users/emmythamakaison/Documents/ASES-Website/src/components/ProfileCard.jsx\",\n  _s = $RefreshSig$();\nimport { Box } from \"@mui/material\";\nimport CardMedia from '@mui/material/CardMedia';\nimport Card from '@mui/material/Card';\nimport { styled } from '@mui/material/styles';\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProfileCard = ({\n  text,\n  image\n}) => {\n  _s();\n  const [isHovered, setIsHovered] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        width: 303,\n        height: 395,\n        backgroundColor: 'F8F9FC',\n        border: \"1px solid black\",\n        borderRadius: 3,\n        '&:hover': {\n          backgroundColor: 'black'\n        }\n      },\n      onMouseEnter: () => setIsHovered(true),\n      onMouseLeave: () => setIsHovered(false),\n      children: [!isHovered && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CardMedia, {\n          sx: {\n            height: 140\n          },\n          image: image,\n          title: \"Profile Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"text.secondary\",\n            children: text.split('\\n').map((line, i) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [line, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 41\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true), isHovered && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            color: \"white\",\n            children: text.split('\\n').map((line, i) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [line, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 41\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n  // return (\n  //     <>\n  //     <div\n  //         onMouseEnter={() => setIsHovered(true)}\n  //         onMouseLeave={() => setIsHovered(false)}\n  //         >\n  //             {!isHovered && (\n  //                 <Card sx={{\n  //                     width: 303,\n  //                     height: 395,\n  //                     backgroundColor: 'F8F9FC',\n  //                     border: \"1px solid black\",\n  //                     borderRadius: 3,\n  //                 }}\n  //         >\n  //             <CardMedia \n  //                 sx={{ \n  //                     height: 140,\n  //                 }}\n  //                 image={image}\n  //                 title=\"Profile Image\"\n  //               />\n  //             <CardContent>\n  //                 <Typography variant=\"body2\" color=\"text.secondary\">\n  //                     {text.split('\\n').map((line, i) => (\n  //                         <React.Fragment key={i}>\n  //                             {line}\n  //                             <br />\n  //                         </React.Fragment>\n  //                     ))}\n  //                 </Typography>\n  //             </CardContent>\n  //         </Card>\n  //             )}\n  //             {isHovered && (\n  //                 <Card sx={{\n  //                     width: 303,\n  //                     height: 395,\n  //                     backgroundColor: 'black',\n  //                     borderRadius: 3,\n  //                 }}\n  //         >\n  //             <CardContent>\n  //                 <Typography variant=\"body2\" color=\"white\">\n  //                     {text.split('\\n').map((line, i) => (\n  //                         <React.Fragment key={i}>\n  //                             {line}\n  //                             <br />\n  //                         </React.Fragment>\n  //                     ))}\n  //                 </Typography>\n  //             </CardContent>\n  //         </Card>\n  //             )}\n  //     </div>\n  //     </>\n  // );\n};\n_s(ProfileCard, \"FPQn8a98tPjpohC7NUYORQR8GJE=\");\n_c = ProfileCard;\nexport default ProfileCard;\nvar _c;\n$RefreshReg$(_c, \"ProfileCard\");","map":{"version":3,"names":["Box","CardMedia","Card","styled","CardContent","Typography","React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","ProfileCard","text","image","_s","isHovered","setIsHovered","children","sx","width","height","backgroundColor","border","borderRadius","onMouseEnter","onMouseLeave","title","fileName","_jsxFileName","lineNumber","columnNumber","variant","color","split","map","line","i","_c","$RefreshReg$"],"sources":["/Users/emmythamakaison/Documents/ASES-Website/src/components/ProfileCard.jsx"],"sourcesContent":["import { Box } from \"@mui/material\";\nimport CardMedia from '@mui/material/CardMedia';\nimport Card from '@mui/material/Card';\nimport { styled } from '@mui/material/styles';\nimport CardContent from \"@mui/material/CardContent\";\nimport Typography from \"@mui/material/Typography\";\nimport React from \"react\";\nimport { useState } from \"react\";\n\n\nconst ProfileCard = ({text, image}) => {\n    const [isHovered, setIsHovered] = useState(false);\n    return (\n        <>\n            <Card sx={{\n                width: 303,\n                height: 395,\n                backgroundColor: 'F8F9FC',\n                border: \"1px solid black\",\n                borderRadius: 3,\n                '&:hover': {\n                    backgroundColor: 'black'\n                }\n            }}\n            onMouseEnter={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n            >\n                {!isHovered && (\n                    <>\n                        <CardMedia \n                        sx={{ \n                            height: 140,\n                        }}\n                        image={image}\n                        title=\"Profile Image\"\n                        />\n                        <CardContent>\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                                {text.split('\\n').map((line, i) => (\n                                    <React.Fragment key={i}>\n                                        {line}\n                                        <br />\n                                    </React.Fragment>\n                                ))}\n                            </Typography>\n                        </CardContent>\n                    </>\n                )}\n                {isHovered && (\n                    <>\n                        <CardContent>\n                            <Typography variant=\"body2\" color=\"white\">\n                                {text.split('\\n').map((line, i) => (\n                                    <React.Fragment key={i}>\n                                        {line}\n                                        <br />\n                                    </React.Fragment>\n                                ))}\n                            </Typography>\n                        </CardContent>\n                    </>\n                )}\n            </Card>\n        </>\n    );\n    // return (\n    //     <>\n    //     <div\n    //         onMouseEnter={() => setIsHovered(true)}\n    //         onMouseLeave={() => setIsHovered(false)}\n    //         >\n    //             {!isHovered && (\n    //                 <Card sx={{\n    //                     width: 303,\n    //                     height: 395,\n    //                     backgroundColor: 'F8F9FC',\n    //                     border: \"1px solid black\",\n    //                     borderRadius: 3,\n    //                 }}\n    //         >\n    //             <CardMedia \n    //                 sx={{ \n    //                     height: 140,\n    //                 }}\n    //                 image={image}\n    //                 title=\"Profile Image\"\n    //               />\n    //             <CardContent>\n    //                 <Typography variant=\"body2\" color=\"text.secondary\">\n    //                     {text.split('\\n').map((line, i) => (\n    //                         <React.Fragment key={i}>\n    //                             {line}\n    //                             <br />\n    //                         </React.Fragment>\n    //                     ))}\n    //                 </Typography>\n    //             </CardContent>\n    //         </Card>\n    //             )}\n    //             {isHovered && (\n    //                 <Card sx={{\n    //                     width: 303,\n    //                     height: 395,\n    //                     backgroundColor: 'black',\n    //                     borderRadius: 3,\n    //                 }}\n    //         >\n    //             <CardContent>\n    //                 <Typography variant=\"body2\" color=\"white\">\n    //                     {text.split('\\n').map((line, i) => (\n    //                         <React.Fragment key={i}>\n    //                             {line}\n    //                             <br />\n    //                         </React.Fragment>\n    //                     ))}\n    //                 </Typography>\n    //             </CardContent>\n    //         </Card>\n    //             )}\n    //     </div>\n    //     </>\n    // );\n};\n\nexport default ProfileCard;\n"],"mappings":";;AAAA,SAASA,GAAG,QAAQ,eAAe;AACnC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,IAAI,MAAM,oBAAoB;AACrC,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGjC,MAAMC,WAAW,GAAGA,CAAC;EAACC,IAAI;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,oBACIE,OAAA,CAAAE,SAAA;IAAAO,QAAA,eACIT,OAAA,CAACP,IAAI;MAACiB,EAAE,EAAE;QACNC,KAAK,EAAE,GAAG;QACVC,MAAM,EAAE,GAAG;QACXC,eAAe,EAAE,QAAQ;QACzBC,MAAM,EAAE,iBAAiB;QACzBC,YAAY,EAAE,CAAC;QACf,SAAS,EAAE;UACPF,eAAe,EAAE;QACrB;MACJ,CAAE;MACFG,YAAY,EAAEA,CAAA,KAAMR,YAAY,CAAC,IAAI,CAAE;MACvCS,YAAY,EAAEA,CAAA,KAAMT,YAAY,CAAC,KAAK,CAAE;MAAAC,QAAA,GAEnC,CAACF,SAAS,iBACPP,OAAA,CAAAE,SAAA;QAAAO,QAAA,gBACIT,OAAA,CAACR,SAAS;UACVkB,EAAE,EAAE;YACAE,MAAM,EAAE;UACZ,CAAE;UACFP,KAAK,EAAEA,KAAM;UACba,KAAK,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB,CAAC,eACFtB,OAAA,CAACL,WAAW;UAAAc,QAAA,eACRT,OAAA,CAACJ,UAAU;YAAC2B,OAAO,EAAC,OAAO;YAACC,KAAK,EAAC,gBAAgB;YAAAf,QAAA,EAC7CL,IAAI,CAACqB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,kBAC1B5B,OAAA,CAACH,KAAK,CAACI,QAAQ;cAAAQ,QAAA,GACVkB,IAAI,eACL3B,OAAA;gBAAAmB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA,GAFWM,CAAC;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAGN,CACnB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC;MAAA,eAChB,CACL,EACAf,SAAS,iBACNP,OAAA,CAAAE,SAAA;QAAAO,QAAA,eACIT,OAAA,CAACL,WAAW;UAAAc,QAAA,eACRT,OAAA,CAACJ,UAAU;YAAC2B,OAAO,EAAC,OAAO;YAACC,KAAK,EAAC,OAAO;YAAAf,QAAA,EACpCL,IAAI,CAACqB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,kBAC1B5B,OAAA,CAACH,KAAK,CAACI,QAAQ;cAAAQ,QAAA,GACVkB,IAAI,eACL3B,OAAA;gBAAAmB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA,GAFWM,CAAC;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAGN,CACnB;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ;MAAC,gBAChB,CACL;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC,gBACT,CAAC;EAEP;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC;AAAChB,EAAA,CAhHIH,WAAW;AAAA0B,EAAA,GAAX1B,WAAW;AAkHjB,eAAeA,WAAW;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}